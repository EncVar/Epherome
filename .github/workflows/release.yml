name: Release
on:
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies for Linux
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm" # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # Change this to npm, yarn or pnpm.

      - name: Build the app for Linux amd64 or Windows amd64
        if: matrix.platform != 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__
          releaseName: "Epherome v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false

      - name: Reconfigure for MacOS Universal
        if: matrix.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin && rustup target add x86_64-apple-darwin

      - name: Build the app for MacOS Universal
        if: matrix.platform == 'macos-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__
          releaseName: "Epherome v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false
          args: --target universal-apple-darwin
      
      - name: Reconfigure for Linux on ARMv8(ARM64)
        if: matrix.platform == 'ubuntu-20.04'
        run: rustup target add aarch64-unknown-linux-gnu
      
      - name: Install dependencies for Linux on ARMv8(ARM64)
        if: matrix.platform == 'ubuntu-20.04'
        run: sudo apt install gcc-aarch64-linux-gnu

      - name: Get prepared for Linux on ARMv8(ARM64)
        if: matrix.platform == 'ubuntu-20.04' 
        run: |
          echo "Enabling the respective architecture in the package manager."
          sudo dpkg --add-architecture arm64
          echo "Adjusting Package Sources."
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04 main restricted" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-updates main restricted" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04 universe" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-updates universe" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04 multiverse" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-updates multiverse" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-backports main restricted" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-security main restricted" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-security universe" >> /etc/apt/sources.list
          sudo echo "\ndeb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ubuntu-20.04-security multiverse" >> /etc/apt/sources.list
          echo "Updating the package information"
          sudo apt-get update && sudo apt-get upgrade -y
          echo "Installing the required webkitgtk library"
          sudo apt install libwebkit2gtk-4.0-dev:arm64
          echo "Installing OpenSSL"
          sudo apt install libssl-dev:arm64
          echo "Configuring"
          export PKG_CONFIG_SYSROOT_DIR=/usr/aarch64-linux-gnu/
      
      - name: Build the app for Linux on ARMv8(ARM64)
        if: matrix.platform == 'ubuntu-20.04'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__
          releaseName: "Epherome v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false
          tauriScript: cargo tauri
          args: --target aarch64-unknown-linux-gnu --bundles deb

      - name: Reconfigure for Windows x86
        if: matrix.platform == 'windows-latest'
        run: rustup target add i686-pc-windows-msvc

      - name: Build the app for Windows x86
        if: matrix.platform == 'windows-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__
          releaseName: "Epherome v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false
          args: --target i686-pc-windows-msvc

      - name: Install dependencies for Windows on ARM64
        if: matrix.platform == 'windows-latest'
        uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: amd64_arm64

      - name: Reconfigure for Windows on ARM64
        if: matrix.platform == 'windows-latest'
        run: rustup target add aarch64-pc-windows-msvc
      
      - name: Build the app for Windows on ARM64
        if: matrix.platform == 'windows-latest'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: __VERSION__
          releaseName: "Epherome v__VERSION__" # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: "See the assets to download and install this version."
          releaseDraft: true
          prerelease: false
          args: --target aarch64-pc-windows-msvc --bundles nsis
        
